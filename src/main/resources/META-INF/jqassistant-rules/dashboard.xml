<jqa:jqassistant-rules xmlns:jqa="http://www.buschmais.com/jqassistant/core/rule/schema/v1.4">

    <group id="jqassistant-dashboard:Default">
        <includeConcept refId="jqassistant-dashboard:*" />
    </group>

    <concept id="jqassistant-dashboard:GitDuplicateAuthorsByName">
        <description>Remove duplicate `:Git:Author` commits identified by their `name`</description>
        <cypher><![CDATA[
            MATCH
              (a:Author)
            WITH
              a.name as name, collect(a) as authors
            WITH
              head(authors) as author, tail(authors) as duplicates
            UNWIND
              duplicates as duplicate
            MATCH
              (duplicate)-[:COMMITTED]->(c:Commit)
            MERGE
              (author)-[:COMMITTED]->(c)
            DETACH DELETE
              duplicate
            RETURN
              author.name as Author, count(duplicate) as NumberOfDuplicates
            ORDER BY
              NumberOfDuplicates desc
        ]]></cypher>
    </concept>

    <concept id="jqassistant-dashboard:GitDuplicateAuthorsByEmail">
        <description>Remove duplicate `:Git:Author` commits identified by their `email`</description>
        <cypher><![CDATA[
            MATCH
              (a:Author)
            WITH
              a.email as email, collect(a) as authors
            WITH
              head(authors) as author, tail(authors) as duplicates
            UNWIND
              duplicates as duplicate
            MATCH
              (duplicate)-[:COMMITTED]->(c:Commit)
            MERGE
              (author)-[:COMMITTED]->(c)
            DETACH DELETE
              duplicate
            RETURN
              author.email as Author, count(duplicate) as NumberOfDuplicates
            ORDER BY
              NumberOfDuplicates desc
        ]]></cypher>
    </concept>

    <concept id="jqassistant-dashboard:GitMergeCommit">
        <description>Every `:Git:Commit` with more than one parent commit is labeled as `Merge`</description>
        <cypher><![CDATA[
            MATCH
              (c:Commit)-[:HAS_PARENT]->(p:Commit)
            WITH
              c, count(p) as parents
            WHERE
              parents > 1
            SET
              c:Merge
            RETURN
              count(c) as MergeCommits
        ]]></cypher>
        <verify>
            <aggregation />
        </verify>
    </concept>

    <concept id="jqassistant-dashboard:GitTimeTree">
        <description>Each `:Commit` is assigned to a time tree `(:Commit)-[:OF_DAY]->(:Day)-[:OF_MONTH]-(:Month)-[:OF_YEAR]->(:Year)` according the the commit `date`</description>
        <cypher><![CDATA[
            MATCH
              (c:Commit)
            WITH
              c, split(c.date, "-") as parts
            MERGE
              (y:Year{year:parts[0]})
            MERGE
              (m:Month{month:parts[1]})-[:OF_YEAR]->(y)
            MERGE
              (d:Day{day:parts[2]})-[:OF_MONTH]->(m)
            MERGE
              (c)-[:OF_DAY]->(d)
            RETURN
                y.year as Year, count(c) as Commits
            ORDER BY
              Year
        ]]></cypher>
    </concept>

    <concept id="jqassistant-dashboard:GitFileName">
        <description>Copies the relativePath property of `:Git:File` nodes to the property `fileName` that is index and allows faster lookups</description>
        <cypher><![CDATA[
            MATCH
              (f:Git:File)
            SET
              f.fileName = f.relativePath
            RETURN
              count(f) as Files
        ]]></cypher>
        <verify>
            <aggregation />
        </verify>
    </concept>

    <concept id="jqassistant-dashboard:TypeHasSourceGitFile">
        <requiresConcept refId="jqassistant-dashboard:GitFileName" />
        <description>A `HAS_SOURCE` relationship is created between a `:Java:Type` and a `:Git:File` if their source file names match</description>
        <cypher><![CDATA[
            MATCH
              (p:Java:Package)-[:CONTAINS]->(t:Java:Type)
            WITH
              t, p.fileName + "/" + t.sourceFileName as sourceFileName // e.g. "/org/junit/Test.java"
            MATCH
              (f:Git:File)
            WHERE
              f.fileName ends with sourceFileName
            MERGE
              (t)-[h:HAS_SOURCE]->(f)
            RETURN
              count(h) as Matches
        ]]></cypher>
    </concept>

    <concept id="jqassistant-dashboard:FileType">
        <description>A property `fileType` is added to each `:Git:File` extracted from extension of the `relativePath`.(e.g. java)</description>
        <cypher><![CDATA[
            MATCH
              (f:Git:File)
            WITH
                f, split(f.relativePath, "/") as splittedPathName
            WITH
              f, splittedPathName[size(splittedPathName)-1] as fileName
            WHERE
              fileName contains "."
            WITH
              f, split(fileName, ".") as splittedFileName
            SET
              f.type = splittedFileName[size(splittedFileName)-1]
            RETURN
              f.type as FileType, count(f) as FilesOfType
            ORDER BY
              FilesOfType desc
        ]]></cypher>
    </concept>

    <concept id="jqassistant-dashboard:ProjectFile">
        <description>Every `:Type` which is contained in an artifact is labeled as `:ProjectFile`</description>
        <cypher><![CDATA[
            MATCH
              (:Artifact)-[:CONTAINS]->(t:Type)
            SET
              t:ProjectFile
            RETURN
              count(t) as NumberOfProjectFiles
        ]]></cypher>
        <verify>
            <aggregation />
        </verify>
    </concept>

</jqa:jqassistant-rules>
