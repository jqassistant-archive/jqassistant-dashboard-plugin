{"version":3,"sources":["views/Dashboard/AbstractDashboardComponent.js","AppDispatcher.js","views/Dashboard/CustomCardHeader/CustomCardHeader.js","../node_modules/reactstrap/es/ListGroup.js","../node_modules/reactstrap/es/ListGroupItem.js","api/models/Dashboard.js","views/Dashboard/Dashboard.js"],"names":["AppDispatcher","require","neo4j","localStorage","getItem","neo4jDriver","neo4jSession","databaseCredentialsProvided","databaseCredentialsCorrect","GenericException","message","name","this","DashboardAbstract","handleAction","bind","setState","dispatcherEventId","register","Promise","checkForDatabaseConnection","then","testDatabaseCredentials","connectionString","username","password","refreshConnectionSettings","testrun","v1","driver","auth","basic","session","run","catch","error","unregister","state","event","action","actionType","stateData","data","rdir","console","log","baseUrl","window","location","protocol","host","href","replace","push","react__WEBPACK_IMPORTED_MODULE_5___default","a","createElement","react_router_dom__WEBPACK_IMPORTED_MODULE_6__","key","to","neo4jPassword","neo4jUsername","process","REACT_APP_NEO4J_IP","REACT_APP_NEO4J_USERNAME","REACT_APP_NEO4J_PASSWORD","setItem","projectName","REACT_APP_PROJECT_NAME","limitCountingHotspots","REACT_APP_LIMIT_COUNTING_HOTSPOTS","Component","Dispatcher","dispatch","source","module","exports","CustomCardHeader","props","_this","Object","_home_sebastian_work_Projects_jqa_dashboard_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_0__","_home_sebastian_work_Projects_jqa_dashboard_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_2__","_home_sebastian_work_Projects_jqa_dashboard_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_3__","call","tooltipOpen","popoverOpen","popovers","placement","text","toggleInfo","_home_sebastian_work_Projects_jqa_dashboard_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_assertThisInitialized__WEBPACK_IMPORTED_MODULE_5__","$","each","hasClass","on","group","find","attr","editor","visualizationWrapper","next","removeClass","addClass","parent","i","newArray","map","element","index","_this2","headerText","cardHeaderText","showExpertMode","popoverPlacement","popoverTarget","target","popoverHeaderText","popoverBody","cssClass","toLowerCase","expertToggle","react__WEBPACK_IMPORTED_MODULE_6___default","className","id","_coreui_react__WEBPACK_IMPORTED_MODULE_12__","color","size","label","reactstrap__WEBPACK_IMPORTED_MODULE_7__","isOpen","toggle","reactstrap__WEBPACK_IMPORTED_MODULE_8__","onClick","reactstrap__WEBPACK_IMPORTED_MODULE_9__","reactstrap__WEBPACK_IMPORTED_MODULE_10__","reactstrap__WEBPACK_IMPORTED_MODULE_11__","propTypes","tag","utils","flush","prop_types_default","bool","string","cssModule","object","ListGroup_ListGroup","Tag","attributes","objectWithoutPropertiesLoose","classes","classnames_default","react_default","esm_extends","defaultProps","es_ListGroup","ListGroupItem_propTypes","active","disabled","any","handleDisabledOnClick","e","preventDefault","ListGroupItem_ListGroupItem","es_ListGroupItem","DashboardModel","classCallCheck","dashboardStructureQuery","dashboardDependenciesQuery","dashboardActivityQuery","dashboardHotspotQuery","dashboardPMDQuery","dashboardTestCoverageQuery","queryStringStructure","queryStringDependencies","queryStringActivity","queryStringHotspot","queryStringPMD","queryStringTestCoverage","thisBackup","structureMetrics","result","records","forEach","record","get","low","interfaces","enums","annotations","methods","loc","fields","context","dependencyMetrics","dependencies","extends","implements","invocations","reads","writes","activityMetrics","authors","commitsWithoutMerges","commitsWithMerges","localStorageLimitCountingHotspots","hotspotMetrics","maxCommits","currentCommmits","hotspotCount","Math","round","commitHotspots","staticCodeAnalysisPMDMetrics","violations","testCoverageMetrics","overallTestCoverage","Dashboard","possibleConstructorReturn","getPrototypeOf","queryStructure","queryDependencies","queryActivity","queryHotspot","queryPMD","queryTestCoverage","assertThisInitialized","prototype","dashboardModel","readStructureMetrics","readDependencyMetrics","readActivityMetrics","readStaticCodeAnalysisPMDMetrics","readHotspotMetrics","readTestCoverageMetrics","document","ready","highestBox","height","sendQuery","redirect","length","Row","Col","xs","sm","md","Card","CardBody","Editor","value","options","mode","theme","onValueChange","updateStateQueryStructure","Button","clearStructure","keys","str","toUpperCase","updateStateQueryDependencies","clearDependencies","updateStateQueryActivity","clearActivity","updateStateQueryHotspot","clearHotspot","updateStateQueryPMD","clearPMD","updateStateQueryTestCoverage","clearTestCoverage"],"mappings":"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","file":"static/js/16.b9aac662.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport { Redirect } from \"react-router-dom\";\nvar AppDispatcher = require(\"../../AppDispatcher\");\n\nvar neo4jConnectionString = localStorage.getItem(\"connectionString\"); //\"localhost\";\nvar neo4jUsername = localStorage.getItem(\"username\"); //\"neo4j\";\nvar neo4jPassword = localStorage.getItem(\"password\"); //\"Test123.\";\n\nvar neo4j = null;\nvar neo4jDriver = null;\nvar neo4jSession = null;\n\nvar databaseCredentialsProvided = false;\nvar databaseCredentialsCorrect = true;\n\nfunction GenericException(message, name) {\n    this.message = message;\n    this.name = name;\n}\n\nclass DashboardAbstract extends Component {\n    static checkForDatabaseConnection() {\n        var connectionString = localStorage.getItem(\"connectionString\");\n        var neo4jPassword = localStorage.getItem(\"password\");\n        var neo4jUsername = localStorage.getItem(\"username\");\n\n        databaseCredentialsProvided =\n            connectionString !== null &&\n            connectionString !== \"\" &&\n            neo4jPassword !== null &&\n            neo4jPassword !== \"\" &&\n            neo4jUsername !== null &&\n            neo4jUsername !== \"\";\n\n        // if database credentials are provided via .env file, we load them initially\n        if (\n            !databaseCredentialsProvided &&\n            typeof process.env.REACT_APP_NEO4J_IP !== \"undefined\" &&\n            typeof process.env.REACT_APP_NEO4J_USERNAME !== \"undefined\" &&\n            typeof process.env.REACT_APP_NEO4J_PASSWORD !== \"undefined\"\n        ) {\n            localStorage.setItem(\n                \"connectionString\",\n                process.env.REACT_APP_NEO4J_IP\n            );\n            localStorage.setItem(\n                \"username\",\n                process.env.REACT_APP_NEO4J_USERNAME\n            );\n            localStorage.setItem(\n                \"password\",\n                process.env.REACT_APP_NEO4J_PASSWORD\n            );\n\n            var projectName = \"My project\";\n            if (typeof process.env.REACT_APP_PROJECT_NAME !== \"undefined\") {\n                projectName = process.env.REACT_APP_PROJECT_NAME;\n            }\n            localStorage.setItem(\"projectName\", projectName);\n\n            var limitCountingHotspots = \"70\";\n            if (\n                typeof process.env.REACT_APP_LIMIT_COUNTING_HOTSPOTS !==\n                \"undefined\"\n            ) {\n                limitCountingHotspots =\n                    process.env.REACT_APP_LIMIT_COUNTING_HOTSPOTS;\n            }\n            localStorage.setItem(\n                \"limitCountingHotspots\",\n                limitCountingHotspots\n            );\n\n            databaseCredentialsProvided = true;\n        }\n    }\n\n    componentWillMount() {\n        this.handleAction = this.handleAction.bind(this);\n        this.setState({\n            dispatcherEventId: AppDispatcher.register(this.handleAction)\n        });\n\n        return new Promise(DashboardAbstract.checkForDatabaseConnection).then(\n            this.testDatabaseCredentials()\n        );\n    }\n\n    testDatabaseCredentials() {\n        var connectionString = neo4jConnectionString;\n        var username = neo4jUsername;\n        var password = neo4jPassword;\n\n        connectionString = localStorage.getItem(\"connectionString\"); //if we're on settings page and trying to validate new credentials\n        username = localStorage.getItem(\"username\"); //if we're on settings page and trying to validate new credentials\n        password = localStorage.getItem(\"password\"); //if we're on settings page and trying to validate new credentials\n\n        if (databaseCredentialsProvided) {\n            this.refreshConnectionSettings(); //set to abstract variables\n\n            //TODO: check if there is a better method for running dashboard and test components\n            if (typeof testrun !== \"undefined\") {\n                neo4j = require(\"neo4j-driver\");\n            } else {\n                neo4j = require(\"neo4j-driver/lib/browser/neo4j-web\");\n            }\n\n            neo4jDriver = neo4j.v1.driver(\n                \"bolt://\" + connectionString,\n                neo4j.v1.auth.basic(username, password)\n            );\n            neo4jSession = neo4jDriver.session();\n\n            return neo4jSession\n                .run(\"match (n) return n limit 1\") //this should be as generic as possible =)\n                .then(function() {\n                    databaseCredentialsCorrect = true;\n                })\n                .catch(function(error) {\n                    databaseCredentialsCorrect = false;\n                    neo4jConnectionString = \"\";\n                    throw new GenericException(\n                        \"Invalid database connection data\",\n                        \"InvalidDatabaseConnectionException\"\n                    );\n                }); //handle wrong credentials\n        } //end if\n    }\n\n    componentDidMount() {}\n\n    refreshConnectionSettings() {\n        neo4jConnectionString = localStorage.getItem(\"connectionString\"); //\"localhost\";\n        neo4jUsername = localStorage.getItem(\"username\"); //\"neo4j\";\n        neo4jPassword = localStorage.getItem(\"password\"); //\"Test123.\";\n    }\n\n    componentWillUnmount() {\n        if (neo4jSession !== null) {\n            //neo4jSession.close(); //TODO: this triggers (atm) WebSocket is closed before the connection is established. > disabled\n        }\n        if (neo4jDriver !== null) {\n            //neo4jDriver.close(); //TODO: this triggers (atm) WebSocket is closed before the connection is established. > disabled\n        }\n\n        AppDispatcher.unregister(this.state.dispatcherEventId);\n    }\n\n    handleAction(event) {\n        var action = event.action;\n        switch (action.actionType) {\n            case \"SET_STATE\":\n                var stateData = event.action.data;\n                this.setState(stateData);\n                break;\n            default:\n                break;\n        }\n    }\n\n    render() {\n        var rdir = [];\n        if (!databaseCredentialsProvided || !databaseCredentialsCorrect) {\n            console.log(\"No database credentials, redirecting to settings...\");\n            var baseUrl =\n                window.location.protocol + \"//\" + window.location.host + \"/#\";\n            var path = window.location.href.replace(baseUrl, \"\");\n            if (path !== \"/settings\") {\n                rdir.push(<Redirect key=\"dummy\" to=\"/settings\" />);\n            }\n        }\n\n        return rdir;\n    }\n}\n\nexport default DashboardAbstract;\nexport {\n    neo4j,\n    neo4jSession,\n    databaseCredentialsProvided,\n    databaseCredentialsCorrect,\n    GenericException\n};\n","var Dispatcher = require('flux').Dispatcher;\n\n// Create dispatcher instance\nvar AppDispatcher = new Dispatcher();\n\n// Convenience method to handle dispatch requests\nAppDispatcher.handleAction = function (action) {\n  this.dispatch({\n    source: 'VIEW_ACTION',\n    action: action\n  });\n}\n\nmodule.exports = AppDispatcher;","import React, { Component } from \"react\";\nimport {\n    CardHeader,\n    Popover,\n    PopoverHeader,\n    PopoverBody,\n    Tooltip\n} from \"reactstrap\";\nimport { AppSwitch } from \"@coreui/react\";\nimport $ from \"jquery\";\n\nclass CustomCardHeader extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            tooltipOpen: [false, false],\n            popoverOpen: false,\n            popovers: [\n                {\n                    placement: \"bottom\",\n                    text: \"Bottom\"\n                }\n            ]\n        };\n\n        this.toggleInfo = this.toggleInfo.bind(this);\n    }\n\n    componentDidMount() {\n        $(\".expert-mode\").each(function() {\n            if ($(this).hasClass(\"expert-mode-set\") === false) {\n                $(this).on(\"change\", function() {\n                    var group = $(this)\n                        .find(\"input\")\n                        .attr(\"id\");\n                    var editor = $(\".expert-mode-editor\");\n                    var visualizationWrapper = $(\".visualization-wrapper\");\n                    if (\n                        typeof group !== \"undefined\" &&\n                        editor.hasClass(group)\n                    ) {\n                        editor = $(\".expert-mode-editor.\" + group);\n                        visualizationWrapper = editor.next(\n                            \".visualization-wrapper\"\n                        );\n                    }\n\n                    if (editor.hasClass(\"hide-expert-mode\")) {\n                        editor.removeClass(\"hide-expert-mode\");\n                        visualizationWrapper.addClass(\n                            \"margin-top-50 margin-bottom-50\"\n                        );\n                        editor.parent(\".card-body\").addClass(\"height-auto\");\n                    } else {\n                        editor.addClass(\"hide-expert-mode\");\n                        visualizationWrapper.removeClass(\n                            \"margin-top-50 margin-bottom-50\"\n                        );\n                        editor.parent(\".card-body\").removeClass(\"height-auto\");\n                    }\n                });\n                $(this).addClass(\"expert-mode-set\");\n            }\n        });\n    }\n\n    toggle(i) {\n        const newArray = this.state.tooltipOpen.map((element, index) => {\n            return index === i ? !element : false;\n        });\n        this.setState({\n            tooltipOpen: newArray\n        });\n    }\n\n    toggleInfo() {\n        this.setState({\n            popoverOpen: !this.state.popoverOpen\n        });\n    }\n\n    render() {\n        var headerText = this.props.cardHeaderText;\n        var showExpertMode = this.props.showExpertMode;\n        var popoverPlacement = this.props.placement;\n        //var popoverIsOpen = this.props.isOpen;\n        var popoverTarget = this.props.target;\n        //var popoverToggle = this.props.toggle;\n        var popoverHeaderText = this.props.popoverHeaderText;\n        var popoverBody = this.props.popoverBody;\n        var cssClass = headerText\n            .toLowerCase()\n            .replace(/\\s/g, \"-\")\n            .replace(/[&/\\\\#,+()$~%.'\":*?<>{}]/g, \"\");\n\n        var expertToggle = \"\";\n        if (showExpertMode) {\n            expertToggle = (\n                <div className={\"float-left\"}>\n                    <div id={\"tooltip-\" + cssClass}>\n                        <AppSwitch\n                            id={cssClass}\n                            className={\n                                \"mx-1 float-right display-block expert-mode \" +\n                                cssClass\n                            }\n                            color={\"secondary\"}\n                            size={\"sm\"}\n                            label\n                        />\n                    </div>\n                    <Tooltip\n                        placement=\"top\"\n                        isOpen={this.state.tooltipOpen[0]}\n                        target={\"tooltip-\" + cssClass}\n                        toggle={() => {\n                            this.toggle(0);\n                        }}\n                    >\n                        Toggle expert mode\n                    </Tooltip>\n                </div>\n            );\n        }\n\n        return (\n            <CardHeader>\n                {headerText}\n                <div className=\"card-actions\">\n                    {expertToggle}\n                    <button onClick={this.toggleInfo} id={popoverTarget}>\n                        <i className=\"text-muted fa fa-question-circle\" />\n                    </button>\n                    <Tooltip\n                        placement=\"top\"\n                        isOpen={this.state.tooltipOpen[1]}\n                        target={popoverTarget}\n                        toggle={() => {\n                            this.toggle(1);\n                        }}\n                    >\n                        Show details\n                    </Tooltip>\n                    <Popover\n                        placement={popoverPlacement}\n                        isOpen={this.state.popoverOpen}\n                        target={popoverTarget}\n                        toggle={this.toggleInfo}\n                    >\n                        <PopoverHeader>{popoverHeaderText}</PopoverHeader>\n                        <PopoverBody>{popoverBody}</PopoverBody>\n                    </Popover>\n                </div>\n            </CardHeader>\n        );\n    }\n}\n\nexport default CustomCardHeader;\n","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { mapToCssModules, tagPropType } from './utils';\nvar propTypes = {\n  tag: tagPropType,\n  flush: PropTypes.bool,\n  className: PropTypes.string,\n  cssModule: PropTypes.object\n};\nvar defaultProps = {\n  tag: 'ul'\n};\n\nvar ListGroup = function ListGroup(props) {\n  var className = props.className,\n      cssModule = props.cssModule,\n      Tag = props.tag,\n      flush = props.flush,\n      attributes = _objectWithoutPropertiesLoose(props, [\"className\", \"cssModule\", \"tag\", \"flush\"]);\n\n  var classes = mapToCssModules(classNames(className, 'list-group', flush ? 'list-group-flush' : false), cssModule);\n  return React.createElement(Tag, _extends({}, attributes, {\n    className: classes\n  }));\n};\n\nListGroup.propTypes = propTypes;\nListGroup.defaultProps = defaultProps;\nexport default ListGroup;","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { mapToCssModules, tagPropType } from './utils';\nvar propTypes = {\n  tag: tagPropType,\n  active: PropTypes.bool,\n  disabled: PropTypes.bool,\n  color: PropTypes.string,\n  action: PropTypes.bool,\n  className: PropTypes.any,\n  cssModule: PropTypes.object\n};\nvar defaultProps = {\n  tag: 'li'\n};\n\nvar handleDisabledOnClick = function handleDisabledOnClick(e) {\n  e.preventDefault();\n};\n\nvar ListGroupItem = function ListGroupItem(props) {\n  var className = props.className,\n      cssModule = props.cssModule,\n      Tag = props.tag,\n      active = props.active,\n      disabled = props.disabled,\n      action = props.action,\n      color = props.color,\n      attributes = _objectWithoutPropertiesLoose(props, [\"className\", \"cssModule\", \"tag\", \"active\", \"disabled\", \"action\", \"color\"]);\n\n  var classes = mapToCssModules(classNames(className, active ? 'active' : false, disabled ? 'disabled' : false, action ? 'list-group-item-action' : false, color ? \"list-group-item-\" + color : false, 'list-group-item'), cssModule); // Prevent click event when disabled.\n\n  if (disabled) {\n    attributes.onClick = handleDisabledOnClick;\n  }\n\n  return React.createElement(Tag, _extends({}, attributes, {\n    className: classes\n  }));\n};\n\nListGroupItem.propTypes = propTypes;\nListGroupItem.defaultProps = defaultProps;\nexport default ListGroupItem;","import { neo4jSession } from \"../../views/Dashboard/AbstractDashboardComponent\";\n\nclass DashboardModel {\n    constructor(props) {\n        const dashboardStructureQuery =\n            // architecture metrics (table 1)\n            // number of classes\n            \"OPTIONAL MATCH (t:Type:Class)-[:HAS_SOURCE]->(:File) \" +\n            \"WITH count(t) as classes \" +\n            // number of interfaces\n            \"OPTIONAL MATCH (t:Type:Interface)-[:HAS_SOURCE]->(:File) \" +\n            \"WITH classes, count(t) as interfaces \" +\n            // number of enums\n            \"OPTIONAL MATCH (t:Type:Enum)-[:HAS_SOURCE]->(:File) \" +\n            \"WITH classes, interfaces, count(t) as enums \" +\n            // number of annotations\n            \"OPTIONAL MATCH (t:Type:Enum)-[:HAS_SOURCE]->(:File) \" +\n            \"WITH  classes, interfaces, enums, count(t) as annotations \" +\n            // number of methods and lines of code\n            \"OPTIONAL MATCH (t:Type)-[:HAS_SOURCE]->(:File), (t)-[:DECLARES]->(m:Method) \" +\n            \"WITH classes, interfaces, enums, annotations, count(m) as methods, sum(m.effectiveLineCount) as loc \" +\n            // number of fields\n            \"OPTIONAL MATCH (t:Type)-[:HAS_SOURCE]->(:File), (t)-[:DECLARES]->(f:Field) \" +\n            \"RETURN classes, interfaces, enums, annotations, methods, loc, count(f) as fields\";\n        localStorage.setItem(\n            \"dashboard_structure_original_query\",\n            dashboardStructureQuery\n        );\n\n        const dashboardDependenciesQuery =\n            // relation metrics (table 2)\n            // dependencies\n            \"OPTIONAL MATCH (t:Type)-[:HAS_SOURCE]->(:File), (t)-[d:DEPENDS_ON]->(:Type) \" +\n            \"WITH count(d) as dependencies \" +\n            // extends\n            \"OPTIONAL MATCH (t:Type)-[:HAS_SOURCE]->(:File), (t)-[e:EXTENDS]->(superType:Type) \" +\n            'WHERE superType.name <> \"Object\" ' +\n            \"WITH dependencies, count(e) as extends \" +\n            // implements\n            \"OPTIONAL MATCH (t:Type)-[:HAS_SOURCE]->(:File), (t)-[i:IMPLEMENTS]->(:Type) \" +\n            \"WITH dependencies, extends, count(i) as implements \" +\n            // calls\n            \"OPTIONAL MATCH (t:Type)-[:HAS_SOURCE]->(:File), (t)-[:DECLARES]->(m:Method)-[i:INVOKES]->(:Method) \" +\n            \"WITH dependencies, extends, implements, count(i) as invocations \" +\n            // reads\n            \"OPTIONAL MATCH (t:Type)-[:HAS_SOURCE]->(:File), (t)-[:DECLARES]->(m:Method)-[r:READS]->(:Field) \" +\n            \"WITH dependencies, extends, implements, invocations, count(r) as reads \" +\n            // writes\n            \"OPTIONAL MATCH (t:Type)-[:HAS_SOURCE]->(:File), (t)-[:DECLARES]->(m:Method)-[w:WRITES]->(:Field) \" +\n            \"RETURN dependencies, extends, implements, invocations, reads, count(w) as writes\";\n        localStorage.setItem(\n            \"dashboard_dependencies_original_query\",\n            dashboardDependenciesQuery\n        );\n\n        const dashboardActivityQuery =\n            // activity metrics (table)\n            // number of authors\n            \"OPTIONAL MATCH (a:Author) \" +\n            \"WITH count(a) as authors \" +\n            // number of commits (without merges)\n            \"OPTIONAL MATCH (c:Commit)-[:CONTAINS_CHANGE]->()-[:MODIFIES]->(f:File) \" +\n            \"WHERE NOT c:Merge \" +\n            \"WITH authors, count(c) as commitsWithoutMerges \" +\n            // number of commits (including merges)\n            \"OPTIONAL MATCH (c:Commit)-[:CONTAINS_CHANGE]->()-[:MODIFIES]->(f:File) \" +\n            \"RETURN authors, commitsWithoutMerges, count(c) as commitsWithMerges\";\n        localStorage.setItem(\n            \"dashboard_activity_original_query\",\n            dashboardActivityQuery\n        );\n\n        const dashboardHotspotQuery =\n            // number of commits\n            \"MATCH (c:Commit)-[:CONTAINS_CHANGE]->()-[:MODIFIES]->(f:File) WHERE NOT c:Merge WITH f, count(c) as commits MATCH (t:Type)-[:HAS_SOURCE]->(f), (t)-[:DECLARES]->(m:Method) RETURN t.fqn as fqn, sum(commits) as commits ORDER BY fqn ASCENDING\";\n        localStorage.setItem(\n            \"dashboard_hotspot_original_query\",\n            dashboardHotspotQuery\n        );\n\n        const dashboardPMDQuery =\n            // number of violations\n            \"MATCH (:Report)-[:HAS_FILE]->(file:File:Pmd)-[:HAS_VIOLATION]->(violation:Violation) RETURN count(violation)\";\n        localStorage.setItem(\"dashboard_pmd_original_query\", dashboardPMDQuery);\n\n        const dashboardTestCoverageQuery =\n            // number of violations\n            \"MATCH (c:Jacoco:Class)-[:HAS_METHOD]->(m:Method:Jacoco)-[:HAS_COUNTER]->(t:Counter) WHERE t.type='INSTRUCTION' RETURN (sum(t.covered)*100)/(sum(t.covered)+sum(t.missed)) as coverage\";\n        localStorage.setItem(\n            \"dashboard_test_coverage_original_query\",\n            dashboardTestCoverageQuery\n        );\n\n        this.state = {\n            queryStringStructure: dashboardStructureQuery,\n            queryStringDependencies: dashboardDependenciesQuery,\n            queryStringActivity: dashboardActivityQuery,\n            queryStringHotspot: dashboardHotspotQuery,\n            queryStringPMD: dashboardPMDQuery,\n            queryStringTestCoverage: dashboardTestCoverageQuery\n        };\n\n        if (!localStorage.getItem(\"dashboard_structure_expert_query\")) {\n            localStorage.setItem(\n                \"dashboard_structure_expert_query\",\n                this.state.queryStringStructure\n            );\n        } else {\n            this.state.queryStringStructure = localStorage.getItem(\n                \"dashboard_structure_expert_query\"\n            );\n        }\n\n        if (!localStorage.getItem(\"dashboard_dependencies_expert_query\")) {\n            localStorage.setItem(\n                \"dashboard_dependencies_expert_query\",\n                this.state.queryStringDependencies\n            );\n        } else {\n            this.state.queryStringDependencies = localStorage.getItem(\n                \"dashboard_dependencies_expert_query\"\n            );\n        }\n\n        if (!localStorage.getItem(\"dashboard_activity_expert_query\")) {\n            localStorage.setItem(\n                \"dashboard_activity_expert_query\",\n                this.state.queryStringActivity\n            );\n        } else {\n            this.state.queryStringActivity = localStorage.getItem(\n                \"dashboard_activity_expert_query\"\n            );\n        }\n\n        if (!localStorage.getItem(\"dashboard_hotspot_expert_query\")) {\n            localStorage.setItem(\n                \"dashboard_hotspot_expert_query\",\n                this.state.queryStringHotspot\n            );\n        } else {\n            this.state.queryStringHotspot = localStorage.getItem(\n                \"dashboard_hotspot_expert_query\"\n            );\n        }\n\n        if (!localStorage.getItem(\"dashboard_pmd_expert_query\")) {\n            localStorage.setItem(\n                \"dashboard_pmd_expert_query\",\n                this.state.queryStringPMD\n            );\n        } else {\n            this.state.queryStringPMD = localStorage.getItem(\n                \"dashboard_pmd_expert_query\"\n            );\n        }\n\n        if (!localStorage.getItem(\"dashboard_test_coverage_expert_query\")) {\n            localStorage.setItem(\n                \"dashboard_test_coverage_expert_query\",\n                this.state.queryStringTestCoverage\n            );\n        } else {\n            this.state.queryStringTestCoverage = localStorage.getItem(\n                \"dashboard_test_coverage_expert_query\"\n            );\n        }\n    }\n\n    readStructureMetrics(thisBackup) {\n        var structureMetrics = [];\n\n        neo4jSession\n            .run(this.state.queryStringStructure)\n            .then(function(result) {\n                result.records.forEach(function(record) {\n                    structureMetrics = {\n                        classes: record.get(0).low,\n                        interfaces: record.get(1).low,\n                        enums: record.get(2).low,\n                        annotations: record.get(3).low,\n                        methods: record.get(4).low,\n                        loc: record.get(5).low,\n                        fields: record.get(6).low\n                    };\n\n                    //console.log(structureMetrics);\n                });\n            })\n            .then(function(context) {\n                thisBackup.setState({ structureMetrics: structureMetrics });\n            })\n            .catch(function(error) {\n                console.log(error);\n            });\n    }\n\n    readDependencyMetrics(thisBackup) {\n        var dependencyMetrics = [];\n\n        neo4jSession\n            .run(this.state.queryStringDependencies)\n            .then(function(result) {\n                result.records.forEach(function(record) {\n                    dependencyMetrics = {\n                        dependencies: record.get(0).low,\n                        extends: record.get(1).low,\n                        implements: record.get(2).low,\n                        invocations: record.get(3).low,\n                        reads: record.get(4).low,\n                        writes: record.get(5).low\n                    };\n\n                    //console.log(dependencyMetrics);\n                });\n            })\n            .then(function(context) {\n                thisBackup.setState({ dependencyMetrics: dependencyMetrics });\n            })\n            .catch(function(error) {\n                console.log(error);\n            });\n    }\n\n    readActivityMetrics(thisBackup) {\n        var activityMetrics = [];\n\n        neo4jSession\n            .run(this.state.queryStringActivity)\n            .then(function(result) {\n                result.records.forEach(function(record) {\n                    activityMetrics = {\n                        authors: record.get(0).low,\n                        commitsWithoutMerges: record.get(1).low,\n                        commitsWithMerges: record.get(2).low\n                    };\n\n                    //console.log(activityMetrics);\n                });\n            })\n            .then(function(context) {\n                thisBackup.setState({ activityMetrics: activityMetrics });\n            })\n            .catch(function(error) {\n                console.log(error);\n            });\n    }\n\n    readHotspotMetrics(thisBackup) {\n        const IDENTIFIER_LIMIT_COUNTING_HOTSPOTS = \"limitCountingHotspots\";\n\n        var localStorageLimitCountingHotspots = localStorage.getItem(\n            IDENTIFIER_LIMIT_COUNTING_HOTSPOTS\n        );\n        var hotspotMetrics = [];\n\n        neo4jSession\n            .run(this.state.queryStringHotspot)\n            .then(function(result) {\n                var maxCommits = 0;\n\n                result.records.forEach(function(record) {\n                    var currentCommmits = record.get(1).low;\n\n                    if (currentCommmits > maxCommits) {\n                        maxCommits = currentCommmits;\n                    }\n                });\n\n                var hotspotCount = 0;\n                result.records.forEach(function(record) {\n                    var currentCommmits = record.get(1).low;\n\n                    if (\n                        Math.round((currentCommmits / maxCommits) * 100) >=\n                        localStorageLimitCountingHotspots\n                    ) {\n                        hotspotCount++;\n                    }\n                });\n\n                hotspotMetrics = {\n                    commitHotspots: hotspotCount\n                };\n            })\n            .then(function(context) {\n                thisBackup.setState({\n                    hotspotMetrics: hotspotMetrics\n                });\n            })\n            .catch(function(error) {\n                console.log(error);\n            });\n    }\n\n    readStaticCodeAnalysisPMDMetrics(thisBackup) {\n        var staticCodeAnalysisPMDMetrics = [];\n\n        neo4jSession\n            .run(this.state.queryStringPMD)\n            .then(function(result) {\n                result.records.forEach(function(record) {\n                    staticCodeAnalysisPMDMetrics = {\n                        violations: record.get(0).low\n                    };\n\n                    //console.log(staticCodeAnalysisPMDMetrics);\n                });\n            })\n            .then(function(context) {\n                thisBackup.setState({\n                    staticCodeAnalysisPMDMetrics: staticCodeAnalysisPMDMetrics\n                });\n            })\n            .catch(function(error) {\n                console.log(error);\n            });\n    }\n\n    readTestCoverageMetrics(thisBackup) {\n        var testCoverageMetrics = [];\n\n        neo4jSession\n            .run(this.state.queryStringTestCoverage)\n            .then(function(result) {\n                result.records.forEach(function(record) {\n                    testCoverageMetrics = {\n                        overallTestCoverage: record.get(0).low\n                    };\n\n                    //console.log(testCoverageMetrics);\n                });\n            })\n            .then(function(context) {\n                thisBackup.setState({\n                    testCoverageMetrics: testCoverageMetrics\n                });\n            })\n            .catch(function(error) {\n                console.log(error);\n            });\n    }\n}\n\nexport default DashboardModel;\n","import React from \"react\";\nimport DashboardAbstract, {\n    databaseCredentialsProvided\n} from \"./AbstractDashboardComponent\";\nimport CustomCardHeader from \"./CustomCardHeader/CustomCardHeader\";\nimport { CypherEditor } from \"graph-app-kit/components/Editor\";\nimport {\n    Button,\n    Row,\n    Col,\n    Card,\n    CardBody,\n    ListGroup,\n    ListGroupItem\n} from \"reactstrap\";\nimport DashboardModel from \"../../api/models/Dashboard\";\nimport $ from \"jquery\";\n\nvar AppDispatcher = require(\"../../AppDispatcher\");\n\nclass Dashboard extends DashboardAbstract {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            queryStructure: \"\",\n            queryDependencies: \"\",\n            queryActivity: \"\",\n            queryHotspot: \"\",\n            queryPMD: \"\",\n            queryTestCoverage: \"\",\n            structureMetrics: {\n                classes: \"loading\",\n                interfaces: \"loading\",\n                enums: \"loading\",\n                annotations: \"loading\",\n                methods: \"loading\",\n                loc: \"loading\",\n                fields: \"loading\"\n            },\n            dependencyMetrics: {\n                dependencies: \"loading\",\n                extends: \"loading\",\n                implements: \"loading\",\n                invocations: \"loading\",\n                reads: \"loading\",\n                writes: \"loading\"\n            },\n            activityMetrics: {\n                authors: \"loading\",\n                commitsWithoutMerges: \"loading\",\n                commitsWithMerges: \"loading\"\n            },\n            hotspotMetrics: {\n                commitHotspots: \"loading\"\n            },\n            staticCodeAnalysisPMDMetrics: {\n                violations: \"loading\"\n            },\n            testCoverageMetrics: {\n                overallTestCoverage: \"loading\"\n            }\n        };\n\n        this.toggleInfo = this.toggleInfo.bind(this);\n    }\n\n    componentDidMount() {\n        super.componentDidMount();\n\n        if (databaseCredentialsProvided) {\n            var dashboardModel = new DashboardModel();\n            dashboardModel.readStructureMetrics(this);\n            dashboardModel.readDependencyMetrics(this);\n            dashboardModel.readActivityMetrics(this);\n            dashboardModel.readStaticCodeAnalysisPMDMetrics(this);\n            dashboardModel.readHotspotMetrics(this);\n            dashboardModel.readTestCoverageMetrics(this);\n\n            this.setState({\n                queryStructure: localStorage.getItem(\n                    \"dashboard_structure_expert_query\"\n                ),\n                queryDependencies: localStorage.getItem(\n                    \"dashboard_dependencies_expert_query\"\n                ),\n                queryActivity: localStorage.getItem(\n                    \"dashboard_activity_expert_query\"\n                ),\n                queryHotspot: localStorage.getItem(\n                    \"dashboard_hotspot_expert_query\"\n                ),\n                queryPMD: localStorage.getItem(\"dashboard_pmd_expert_query\"),\n                queryTestCoverage: localStorage.getItem(\n                    \"dashboard_test_coverage_expert_query\"\n                )\n            });\n        }\n\n        $(document).ready(function() {\n            // Select and loop all card-body elements\n            $(\".card-body\").each(function() {\n                // Cache the highest\n                var highestBox = 0;\n\n                // If this box is higher than the cached highest then store it\n                if ($(this).height() > highestBox) {\n                    highestBox = $(this).height();\n                }\n\n                // Set the height of all those children to whichever was highest\n                $(\".card-body\").height(highestBox);\n            });\n        });\n    }\n\n    componentWillUnmount() {\n        super.componentWillUnmount();\n    }\n\n    handleAction(event) {\n        var action = event.action;\n        switch (action.actionType) {\n            case \"EXPERT_QUERY\":\n                if (databaseCredentialsProvided) {\n                    var dashboardModel = new DashboardModel();\n                    dashboardModel.readStructureMetrics(this);\n                    dashboardModel.readDependencyMetrics(this);\n                    dashboardModel.readActivityMetrics(this);\n                    dashboardModel.readStaticCodeAnalysisPMDMetrics(this);\n                    dashboardModel.readHotspotMetrics(this);\n                    dashboardModel.readTestCoverageMetrics(this);\n                }\n                break;\n            default:\n                return true;\n        }\n    }\n\n    clearStructure(event) {\n        localStorage.setItem(\n            \"dashboard_structure_expert_query\",\n            localStorage.getItem(\"dashboard_structure_original_query\")\n        );\n        this.sendQuery(this);\n    }\n\n    clearDependencies(event) {\n        localStorage.setItem(\n            \"dashboard_dependencies_expert_query\",\n            localStorage.getItem(\"dashboard_dependencies_original_query\")\n        );\n        this.sendQuery(this);\n    }\n\n    clearActivity(event) {\n        localStorage.setItem(\n            \"dashboard_activity_expert_query\",\n            localStorage.getItem(\"dashboard_activity_original_query\")\n        );\n        this.sendQuery(this);\n    }\n\n    clearHotspot(event) {\n        localStorage.setItem(\n            \"dashboard_hotspot_expert_query\",\n            localStorage.getItem(\"dashboard_hotspot_original_query\")\n        );\n        this.sendQuery(this);\n    }\n\n    clearPMD(event) {\n        localStorage.setItem(\n            \"dashboard_pmd_expert_query\",\n            localStorage.getItem(\"dashboard_pmd_original_query\")\n        );\n        this.sendQuery(this);\n    }\n\n    clearTestCoverage(event) {\n        localStorage.setItem(\n            \"dashboard_test_coverage_expert_query\",\n            localStorage.getItem(\"dashboard_test_coverage_original_query\")\n        );\n        this.sendQuery(this);\n    }\n\n    sendQuery(event) {\n        this.setState({\n            queryStructure: localStorage.getItem(\n                \"dashboard_structure_expert_query\"\n            ),\n            queryDependencies: localStorage.getItem(\n                \"dashboard_dependencies_expert_query\"\n            ),\n            queryActivity: localStorage.getItem(\n                \"dashboard_activity_expert_query\"\n            ),\n            queryHotspot: localStorage.getItem(\n                \"dashboard_hotspot_expert_query\"\n            ),\n            queryPMD: localStorage.getItem(\"dashboard_pmd_expert_query\"),\n            queryTestCoverage: localStorage.getItem(\n                \"dashboard_test_coverage_expert_query\"\n            )\n        });\n\n        AppDispatcher.handleAction({\n            actionType: \"EXPERT_QUERY\",\n            data: {\n                queryStringStructure: localStorage.getItem(\n                    \"dashboard_structure_expert_query\"\n                ),\n                queryStringDependencies: localStorage.getItem(\n                    \"dashboard_dependencies_expert_query\"\n                ),\n                queryStringActivity: localStorage.getItem(\n                    \"dashboard_activity_expert_query\"\n                ),\n                queryStringHotspot: localStorage.getItem(\n                    \"dashboard_hotspot_expert_query\"\n                ),\n                queryStringPMD: localStorage.getItem(\n                    \"dashboard_pmd_expert_query\"\n                ),\n                queryStringTestCoverage: localStorage.getItem(\n                    \"dashboard_test_coverage_expert_query\"\n                )\n            }\n        });\n    }\n\n    updateStateQueryStructure(event) {\n        localStorage.setItem(\"dashboard_structure_expert_query\", event);\n    }\n\n    updateStateQueryDependencies(event) {\n        localStorage.setItem(\"dashboard_dependencies_expert_query\", event);\n    }\n\n    updateStateQueryActivity(event) {\n        localStorage.setItem(\"dashboard_activity_expert_query\", event);\n    }\n\n    updateStateQueryHotspot(event) {\n        localStorage.setItem(\"dashboard_hotspot_expert_query\", event);\n    }\n\n    updateStateQueryPMD(event) {\n        localStorage.setItem(\"dashboard_pmd_expert_query\", event);\n    }\n\n    updateStateQueryTestCoverage(event) {\n        localStorage.setItem(\"dashboard_test_coverage_expert_query\", event);\n    }\n\n    toggleInfo() {\n        this.setState({\n            popoverOpen: !this.state.popoverOpen\n        });\n    }\n\n    render() {\n        var redirect = super.render();\n        if (redirect.length > 0) {\n            return redirect;\n        }\n\n        return (\n            <div className=\"animated fadeIn dashboard\">\n                <Row>\n                    <Col xs=\"12\" sm=\"6\" md=\"3\">\n                        <Card>\n                            <CustomCardHeader\n                                cardHeaderText={\"Architecture\"}\n                                showExpertMode={true}\n                                placement={\"bottom\"}\n                                target={\"Popover1\"}\n                                popoverHeaderText={\"Architecture\"}\n                                popoverBody={\n                                    \"Common architecture and dependency metrics provide an overview of the project, e.g., number of classes, LOC, number of dependencies, and field reads.\"\n                                }\n                            />\n                            <CardBody>\n                                <div\n                                    className={\n                                        \"expert-mode-editor hide-expert-mode architecture\"\n                                    }\n                                >\n                                    <CypherEditor\n                                        className=\"cypheredit\"\n                                        value={this.state.queryStructure}\n                                        options={{\n                                            mode: \"cypher\",\n                                            theme: \"cypher\"\n                                        }}\n                                        onValueChange={this.updateStateQueryStructure.bind(\n                                            this\n                                        )}\n                                    />\n                                    <Button\n                                        onClick={this.sendQuery.bind(this)}\n                                        className=\"btn btn-success send-query float-right\"\n                                        color=\"success\"\n                                        id=\"send\"\n                                    >\n                                        Send\n                                    </Button>\n                                    <Button\n                                        onClick={this.clearStructure.bind(this)}\n                                        className=\"btn btn-success send-query float-right margin-right\"\n                                        color=\"danger\"\n                                        id=\"reset\"\n                                    >\n                                        Reset\n                                    </Button>\n                                </div>\n                                <a\n                                    href=\"#/architecture/structure\"\n                                    className={\"display-block clear\"}\n                                >\n                                    <strong>Structure metrics</strong>\n                                    <ListGroup className=\"margin-bottom\">\n                                        {Object.keys(\n                                            this.state.structureMetrics\n                                        ).map(function(key) {\n                                            var label = key\n                                                // insert a space before all caps\n                                                .replace(/([A-Z])/g, \" $1\")\n                                                .toLowerCase()\n                                                // uppercase the first character\n                                                .replace(/^./, function(str) {\n                                                    return str.toUpperCase();\n                                                });\n\n                                            return (\n                                                <ListGroupItem\n                                                    key={key}\n                                                    className=\"justify-content-between\"\n                                                >\n                                                    {label}{\" \"}\n                                                    <div className=\"float-right\">\n                                                        {\n                                                            this.state\n                                                                .structureMetrics[\n                                                                key\n                                                            ]\n                                                        }\n                                                    </div>\n                                                </ListGroupItem>\n                                            );\n                                        }, this)}\n                                    </ListGroup>\n                                </a>\n\n                                <div\n                                    className={\n                                        \"expert-mode-editor hide-expert-mode architecture\"\n                                    }\n                                >\n                                    <CypherEditor\n                                        className=\"cypheredit\"\n                                        value={this.state.queryDependencies}\n                                        options={{\n                                            mode: \"cypher\",\n                                            theme: \"cypher\"\n                                        }}\n                                        onValueChange={this.updateStateQueryDependencies.bind(\n                                            this\n                                        )}\n                                    />\n                                    <Button\n                                        onClick={this.sendQuery.bind(this)}\n                                        className=\"btn btn-success send-query float-right\"\n                                        color=\"success\"\n                                        id=\"send\"\n                                    >\n                                        Send\n                                    </Button>\n                                    <Button\n                                        onClick={this.clearDependencies.bind(\n                                            this\n                                        )}\n                                        className=\"btn btn-success send-query float-right margin-right\"\n                                        color=\"danger\"\n                                        id=\"reset\"\n                                    >\n                                        Reset\n                                    </Button>\n                                </div>\n\n                                <a\n                                    href=\"#/architecture/dependencies\"\n                                    className={\"display-block clear\"}\n                                >\n                                    <strong>Dependency metrics</strong>\n                                    <ListGroup>\n                                        {Object.keys(\n                                            this.state.dependencyMetrics\n                                        ).map(function(key) {\n                                            var label = key\n                                                // insert a space before all caps\n                                                .replace(/([A-Z])/g, \" $1\")\n                                                .toLowerCase()\n                                                // uppercase the first character\n                                                .replace(/^./, function(str) {\n                                                    return str.toUpperCase();\n                                                });\n\n                                            return (\n                                                <ListGroupItem\n                                                    key={key}\n                                                    className=\"justify-content-between\"\n                                                >\n                                                    {label}{\" \"}\n                                                    <div className=\"float-right\">\n                                                        {\n                                                            this.state\n                                                                .dependencyMetrics[\n                                                                key\n                                                            ]\n                                                        }\n                                                    </div>\n                                                </ListGroupItem>\n                                            );\n                                        }, this)}\n                                    </ListGroup>\n                                </a>\n                            </CardBody>\n                        </Card>\n                    </Col>\n                    <Col xs=\"12\" sm=\"6\" md=\"3\">\n                        <Card>\n                            <CustomCardHeader\n                                cardHeaderText={\"Resource Management\"}\n                                showExpertMode={true}\n                                placement={\"bottom\"}\n                                target={\"Popover2\"}\n                                popoverHeaderText={\"Resource Management\"}\n                                popoverBody={\n                                    \"Resource management provides an overview of development activities, authors, and their commits.\"\n                                }\n                            />\n                            <CardBody>\n                                <div\n                                    className={\n                                        \"expert-mode-editor hide-expert-mode resource-management\"\n                                    }\n                                >\n                                    <CypherEditor\n                                        className=\"cypheredit\"\n                                        value={this.state.queryActivity}\n                                        options={{\n                                            mode: \"cypher\",\n                                            theme: \"cypher\"\n                                        }}\n                                        onValueChange={this.updateStateQueryActivity.bind(\n                                            this\n                                        )}\n                                    />\n                                    <Button\n                                        onClick={this.sendQuery.bind(this)}\n                                        className=\"btn btn-success send-query float-right\"\n                                        color=\"success\"\n                                        id=\"send\"\n                                    >\n                                        Send\n                                    </Button>\n                                    <Button\n                                        onClick={this.clearActivity.bind(this)}\n                                        className=\"btn btn-success send-query float-right margin-right\"\n                                        color=\"danger\"\n                                        id=\"reset\"\n                                    >\n                                        Reset\n                                    </Button>\n                                </div>\n                                <a\n                                    href=\"#/resource-management/activity\"\n                                    className={\"display-block clear\"}\n                                >\n                                    <strong>Activity metrics</strong>\n                                    <ListGroup>\n                                        {Object.keys(\n                                            this.state.activityMetrics\n                                        ).map(function(key) {\n                                            var label = key\n                                                // insert a space before all caps\n                                                .replace(/([A-Z])/g, \" $1\")\n                                                .toLowerCase()\n                                                // uppercase the first character\n                                                .replace(/^./, function(str) {\n                                                    return str.toUpperCase();\n                                                });\n\n                                            return (\n                                                <ListGroupItem\n                                                    key={key}\n                                                    className=\"justify-content-between\"\n                                                >\n                                                    {label}{\" \"}\n                                                    <div className=\"float-right\">\n                                                        {\n                                                            this.state\n                                                                .activityMetrics[\n                                                                key\n                                                            ]\n                                                        }\n                                                    </div>\n                                                </ListGroupItem>\n                                            );\n                                        }, this)}\n                                    </ListGroup>\n                                </a>\n                            </CardBody>\n                        </Card>\n                    </Col>\n                    <Col xs=\"12\" sm=\"6\" md=\"3\">\n                        <Card>\n                            <CustomCardHeader\n                                cardHeaderText={\"Risk Management\"}\n                                showExpertMode={true}\n                                placement={\"bottom\"}\n                                target={\"Popover3\"}\n                                popoverHeaderText={\"Risk Management\"}\n                                popoverBody={\n                                    \"Risk management helps to identify hotspots of the project.\"\n                                }\n                            />\n                            <CardBody>\n                                <div\n                                    className={\n                                        \"expert-mode-editor hide-expert-mode risk-management\"\n                                    }\n                                >\n                                    <CypherEditor\n                                        className=\"cypheredit\"\n                                        value={this.state.queryHotspot}\n                                        options={{\n                                            mode: \"cypher\",\n                                            theme: \"cypher\"\n                                        }}\n                                        onValueChange={this.updateStateQueryHotspot.bind(\n                                            this\n                                        )}\n                                    />\n                                    <Button\n                                        onClick={this.sendQuery.bind(this)}\n                                        className=\"btn btn-success send-query float-right\"\n                                        color=\"success\"\n                                        id=\"send\"\n                                    >\n                                        Send\n                                    </Button>\n                                    <Button\n                                        onClick={this.clearHotspot.bind(this)}\n                                        className=\"btn btn-success send-query float-right margin-right\"\n                                        color=\"danger\"\n                                        id=\"reset\"\n                                    >\n                                        Reset\n                                    </Button>\n                                </div>\n                                <a\n                                    href=\"#/risk-management/hotspots\"\n                                    className={\"display-block clear\"}\n                                >\n                                    <strong>Hotspot metrics</strong>\n                                    <ListGroup className=\"margin-bottom\">\n                                        {Object.keys(\n                                            this.state.hotspotMetrics\n                                        ).map(function(key) {\n                                            var label = key\n                                                // insert a space before all caps\n                                                .replace(/([A-Z])/g, \" $1\")\n                                                .toLowerCase()\n                                                // uppercase the first character\n                                                .replace(/^./, function(str) {\n                                                    return str.toUpperCase();\n                                                });\n\n                                            return (\n                                                <ListGroupItem\n                                                    key={key}\n                                                    className=\"justify-content-between\"\n                                                >\n                                                    {label}{\" \"}\n                                                    <div className=\"float-right\">\n                                                        {\n                                                            this.state\n                                                                .hotspotMetrics[\n                                                                key\n                                                            ]\n                                                        }\n                                                    </div>\n                                                </ListGroupItem>\n                                            );\n                                        }, this)}\n                                    </ListGroup>\n                                </a>\n                            </CardBody>\n                        </Card>\n                    </Col>\n                    <Col xs=\"12\" sm=\"6\" md=\"3\">\n                        <Card>\n                            <CustomCardHeader\n                                cardHeaderText={\"Quality Management\"}\n                                showExpertMode={true}\n                                placement={\"bottom\"}\n                                target={\"Popover4\"}\n                                popoverHeaderText={\"Quality Management\"}\n                                popoverBody={\n                                    \"Quality management supports quality monitoring with regard to static code analysis results and test coverage.\"\n                                }\n                            />\n                            <CardBody>\n                                <div\n                                    className={\n                                        \"expert-mode-editor hide-expert-mode quality-management\"\n                                    }\n                                >\n                                    <CypherEditor\n                                        className=\"cypheredit\"\n                                        value={this.state.queryPMD}\n                                        options={{\n                                            mode: \"cypher\",\n                                            theme: \"cypher\"\n                                        }}\n                                        onValueChange={this.updateStateQueryPMD.bind(\n                                            this\n                                        )}\n                                    />\n                                    <Button\n                                        onClick={this.sendQuery.bind(this)}\n                                        className=\"btn btn-success send-query float-right\"\n                                        color=\"success\"\n                                        id=\"send\"\n                                    >\n                                        Send\n                                    </Button>\n                                    <Button\n                                        onClick={this.clearPMD.bind(this)}\n                                        className=\"btn btn-success send-query float-right margin-right\"\n                                        color=\"danger\"\n                                        id=\"reset\"\n                                    >\n                                        Reset\n                                    </Button>\n                                </div>\n                                <a\n                                    href=\"#/quality-management/static-code-analysis/pmd\"\n                                    className={\"display-block clear\"}\n                                >\n                                    <strong>Static Code Analysis (PMD)</strong>\n                                    <ListGroup className=\"margin-bottom\">\n                                        {Object.keys(\n                                            this.state\n                                                .staticCodeAnalysisPMDMetrics\n                                        ).map(function(key) {\n                                            var label = key\n                                                // insert a space before all caps\n                                                .replace(/([A-Z])/g, \" $1\")\n                                                .toLowerCase()\n                                                // uppercase the first character\n                                                .replace(/^./, function(str) {\n                                                    return str.toUpperCase();\n                                                });\n\n                                            return (\n                                                <ListGroupItem\n                                                    key={key}\n                                                    className=\"justify-content-between\"\n                                                >\n                                                    {label}{\" \"}\n                                                    <div className=\"float-right\">\n                                                        {\n                                                            this.state\n                                                                .staticCodeAnalysisPMDMetrics[\n                                                                key\n                                                            ]\n                                                        }\n                                                    </div>\n                                                </ListGroupItem>\n                                            );\n                                        }, this)}\n                                    </ListGroup>\n                                </a>\n\n                                <div\n                                    className={\n                                        \"expert-mode-editor hide-expert-mode quality-management\"\n                                    }\n                                >\n                                    <CypherEditor\n                                        className=\"cypheredit\"\n                                        value={this.state.queryTestCoverage}\n                                        options={{\n                                            mode: \"cypher\",\n                                            theme: \"cypher\"\n                                        }}\n                                        onValueChange={this.updateStateQueryTestCoverage.bind(\n                                            this\n                                        )}\n                                    />\n                                    <Button\n                                        onClick={this.sendQuery.bind(this)}\n                                        className=\"btn btn-success send-query float-right\"\n                                        color=\"success\"\n                                        id=\"send\"\n                                    >\n                                        Send\n                                    </Button>\n                                    <Button\n                                        onClick={this.clearTestCoverage.bind(\n                                            this\n                                        )}\n                                        className=\"btn btn-success send-query float-right margin-right\"\n                                        color=\"danger\"\n                                        id=\"reset\"\n                                    >\n                                        Reset\n                                    </Button>\n                                </div>\n                                <a\n                                    href=\"#/quality-management/test-coverage\"\n                                    className={\"display-block clear\"}\n                                >\n                                    <strong>Test Coverage</strong>\n                                    <ListGroup>\n                                        {Object.keys(\n                                            this.state.testCoverageMetrics\n                                        ).map(function(key) {\n                                            var label = key\n                                                // insert a space before all caps\n                                                .replace(/([A-Z])/g, \" $1\")\n                                                .toLowerCase()\n                                                // uppercase the first character\n                                                .replace(/^./, function(str) {\n                                                    return str.toUpperCase();\n                                                });\n\n                                            return (\n                                                <ListGroupItem\n                                                    key={key}\n                                                    className=\"justify-content-between\"\n                                                >\n                                                    {label}{\" \"}\n                                                    <div className=\"float-right\">\n                                                        {\n                                                            this.state\n                                                                .testCoverageMetrics[\n                                                                key\n                                                            ]\n                                                        }\n                                                        %\n                                                    </div>\n                                                </ListGroupItem>\n                                            );\n                                        }, this)}\n                                    </ListGroup>\n                                </a>\n                            </CardBody>\n                        </Card>\n                    </Col>\n                </Row>\n            </div>\n        );\n    }\n}\n\nexport default Dashboard;\n"],"sourceRoot":""}